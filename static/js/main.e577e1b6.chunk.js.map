{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","Searchbox","placeholder","handlechange","type","onChange","App","e","setState","searcher","target","value","state","fetch","then","response","json","newmonster","this","filtermonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,kBAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBACAC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,aCNbC,EAAW,SAACR,GACtB,OAAO,qBAAKC,UAAY,YAAjB,SACND,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJxCM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACA,uBACAC,KAAO,SACPb,UAAY,SACZW,YAAeA,EACfG,SAAYF,MC+BDG,E,kDAhCX,aAAc,IAAD,8BACb,gBASAH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,SAAWF,EAAEG,OAAOC,SATtC,EAAKC,MAAQ,CAAEb,SAAS,GAAIU,SAAS,IAFxB,E,gEAIO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,+BAOvC,IAAD,EACyBC,KAAKN,MAA5Bb,EADF,EACEA,SAAUU,EADZ,EACYA,SACZU,EAAgBpB,EAASqB,QAAQ,SAAA1B,GACpC,OACDA,EAAQE,KAAKyB,cAAcC,SAASb,EAASY,kBAE/C,OACA,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACAW,YAAc,iBACdC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA5BZI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e577e1b6.chunk.js","sourcesContent":["import React from 'react';\nimport './cardstyle.css';\n\nexport const Card = (props) =>{\n    return(\n        <div className='card-container'>\n            <img \n            alt=\"monster\" \n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        />\n        <h2> {props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport './cardlist-style.css';\nimport'../card/card.component'\nimport { Card } from '../card/card.component';\n\nexport const Cardlist = (props) =>{\n   return(<div className = 'card-list'>\n   {props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n   </div>) \n}\n","import React from 'react';\nimport '../search-box/search-box.style.css'\n\nexport const Searchbox = ({placeholder, handlechange}) => {\n    return(\n    <input \n    type = \"search\"\n    className = \"search\"\n    placeholder = {placeholder}\n    onChange = {handlechange}    \n    />)\n}\n","import './App.css';\nimport React from 'react';\nimport { Component } from \"react\";\nimport {Cardlist} from '../src/components/card-list/card-list.component'\nimport {Searchbox} from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n    constructor(){\n    super()\n    this.state = { monsters:[], searcher:'' }\n    };\n    componentDidMount(){\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(newmonster => this.setState({monsters : newmonster}))\n    }\n\n    handlechange = (e) =>{\n      this.setState({ searcher : e.target.value })\n    }\n    \n    render(){\n      const { monsters, searcher } = this.state;\n      const filtermonster = monsters.filter( monster =>\n        {return( \n        monster.name.toLowerCase().includes(searcher.toLowerCase()))}\n      );\n      return(\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <Searchbox  \n        placeholder = \"search monster\" \n        handlechange = {this.handlechange}\n        />\n        <Cardlist monsters = {filtermonster} />\n    </div>)\n    }};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}